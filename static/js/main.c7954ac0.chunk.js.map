{"version":3,"sources":["serviceWorker.js","assets/styles/Pages/App.tsx","assets/styles/Components/AppImage.tsx","Components/_AppImage.tsx","assets/styles/Components/ItemLink.tsx","Components/_ItemLink.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","App","wrapper","color","header","fontSize","AppImageStyles","image","position","top","left","bottom","right","backgroundPosition","backgroundSize","backgroundRepeat","imageComponent","width","maxWidth","imageWrapper","paddingTop","AppImage","url","imageStyles","backgroundImage","style","ItemLinkStyles","text","link","ItemLink","data","title","author","href","about","rel","renderData","name","map","row","key","AppStyles","OndraJson","itemBulk","MartinJson","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ykSAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBN,IAceC,EALH,CACVC,QAV6B,CAC7BC,MAAO,kBAUPC,OAP4B,CAC5BD,MAAO,QACPE,SAAU,Q,OCsBGC,EANQ,CACrBC,MAvB2B,CAC3BC,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,MAAO,EACPC,mBAAoB,SACpBC,eAAgB,UAChBC,iBAAkB,aAgBlBC,eAboC,CACpCC,MAAO,OACPC,SAAU,QAYVC,aATkC,CAClCF,MAAO,OACPG,WAAY,OACZZ,SAAU,aCdCa,EAAqC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,IAC7CC,EAAW,eACZjB,EAAeC,MADH,CAEfiB,gBAAgB,OAAD,OAASF,EAAT,OAGjB,OACE,yBAAKG,MAAOnB,EAAeU,gBACzB,yBAAKS,MAAOnB,EAAea,cACzB,yBAAKM,MAAOF,OCFLG,EALQ,CACrBC,KAR0B,CAC1BxB,MAAO,iBACPE,SAAU,OAOVuB,KAJ0B,ICIfC,EAAqC,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KACnD,OACE,4BACE,0BAAML,MAAOC,EAAeC,MACzBG,EAAKC,MADR,IACgBD,EAAKE,QAAL,YAAoBF,EAAKE,OAAzB,MAEhB,uBACEP,MAAOC,EAAeE,KACtBK,KAAMH,EAAKR,IACXY,MAAM,SACNC,IAAI,uBAJN,a,cC4BSlC,EA3BgB,WAC7B,IAAMmC,EAA8C,SAACN,GAAD,OAClD,6BACE,4BAAKA,EAAKO,MACTP,EAAKvB,OAAS,kBAAC,EAAD,CAAUe,IAAKQ,EAAKvB,QACnC,4BACGuB,EAAKA,KAAKQ,KAAI,SAAAC,GAAG,OAChB,kBAAC,EAAD,CAAUT,KAAMS,EAAKC,IAAKD,EAAIR,cAMtC,OACE,yBAAKN,MAAOgB,EAAUvC,SACpB,6BACE,wBAAIuB,MAAOgB,EAAUrC,QAArB,UACCsC,IAAoBJ,KAAI,SAAAK,GAAQ,OAAIP,EAAWO,OAElD,6BACE,wBAAIlB,MAAOgB,EAAUrC,QAArB,WACCwC,IAAiBN,KAAI,SAAAK,GAAQ,OAAIP,EAAWO,SCjCrDE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SP2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c7954ac0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CSSProperties } from \"react\";\n\nconst wrapper: CSSProperties = {\n  color: \"DarkSlateGray \"\n};\n\nconst header: CSSProperties = {\n  color: \"black\",\n  fontSize: \"2em\"\n};\n\nconst App = {\n  wrapper,\n  header\n};\n\nexport default App;\n","import { CSSProperties } from \"react\";\n\nconst image: CSSProperties = {\n  position: \"absolute\",\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n  backgroundPosition: \"center\",\n  backgroundSize: \"contain\",\n  backgroundRepeat: \"no-repeat\"\n};\n\nconst imageComponent: CSSProperties = {\n  width: \"30em\",\n  maxWidth: \"100%\"\n};\n\nconst imageWrapper: CSSProperties = {\n  width: \"100%\",\n  paddingTop: \"100%\",\n  position: \"relative\"\n};\n\nconst AppImageStyles = {\n  image,\n  imageComponent,\n  imageWrapper\n};\n\nexport default AppImageStyles;\n","import React, { FunctionComponent, ReactElement } from \"react\";\nimport AppImageStyles from \"../assets/styles/Components/AppImage\";\n\ntype Props = {\n  url: string;\n};\n\nexport const AppImage: FunctionComponent<Props> = ({ url }): ReactElement => {\n  const imageStyles = {\n    ...AppImageStyles.image,\n    backgroundImage: `url(${url})`\n  };\n\n  return (\n    <div style={AppImageStyles.imageComponent}>\n      <div style={AppImageStyles.imageWrapper}>\n        <div style={imageStyles}></div>\n      </div>\n    </div>\n  );\n};\n","import { CSSProperties } from \"react\";\n\nconst text: CSSProperties = {\n  color: \"DarkSlateGray \",\n  fontSize: \"1em\"\n};\n\nconst link: CSSProperties = {};\n\nconst ItemLinkStyles = {\n  text,\n  link\n};\n\nexport default ItemLinkStyles;\n","import React, { FunctionComponent, ReactElement } from \"react\";\nimport ItemLinkStyles from \"../assets/styles/Components/ItemLink\";\n\ntype Props = {\n  data: {\n    title: string;\n    author?: string;\n    url: string;\n  };\n};\n\nexport const ItemLink: FunctionComponent<Props> = ({ data }): ReactElement => {\n  return (\n    <li>\n      <span style={ItemLinkStyles.text}>\n        {data.title} {data.author && `- ${data.author} `}\n      </span>\n      <a\n        style={ItemLinkStyles.link}\n        href={data.url}\n        about=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        (odkaz)\n      </a>\n    </li>\n  );\n};\n","import React, { FunctionComponent, ReactElement } from \"react\";\nimport AppStyles from \"./assets/styles/Pages/App\";\n\nimport { AppImage, ItemLink } from \"./Components\";\n\nimport * as MartinJson from \"./data/Martin/Knizky.json\";\nimport * as OndraJson from \"./data/Ondra/Nabytek.json\";\n\ntype jsonDataType = {\n  name: string;\n  image: string;\n  data: {\n    title: string;\n    author?: string;\n    url: string;\n  }[];\n};\n\nconst App: FunctionComponent = (): ReactElement => {\n  const renderData: FunctionComponent<jsonDataType> = (data): ReactElement => (\n    <div>\n      <h2>{data.name}</h2>\n      {data.image && <AppImage url={data.image} />}\n      <ul>\n        {data.data.map(row => (\n          <ItemLink data={row} key={row.title} />\n        ))}\n      </ul>\n    </div>\n  );\n\n  return (\n    <div style={AppStyles.wrapper}>\n      <div>\n        <h1 style={AppStyles.header}>Ondra:</h1>\n        {OndraJson.furniture.map(itemBulk => renderData(itemBulk))}\n      </div>\n      <div>\n        <h1 style={AppStyles.header}>Martin:</h1>\n        {MartinJson.books.map(itemBulk => renderData(itemBulk))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}